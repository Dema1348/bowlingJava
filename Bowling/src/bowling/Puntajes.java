/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bowling;


import tabla.Records;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import com.google.gson.Gson;
import java.io.FileWriter;
import java.text.DateFormat;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.table.DefaultTableModel;
import tabla.Record;



/**
 *
 * @author Edson
 */
public class Puntajes extends javax.swing.JFrame {

    /**
     * Creates new form Puntajes
     */
    
    public Puntajes() {
        initComponents();
        this.setLocationRelativeTo(null);
        CargaDatos();//funcion para cargar los maximos scores del juego
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnVolver = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        img = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        text.setFont(new java.awt.Font("Javanese Text", 0, 18)); // NOI18N
        text.setForeground(new java.awt.Color(204, 0, 0));
        text.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(text, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, 530, 80));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 173, 530, 130));

        btnVolver.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        getContentPane().add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 370, -1, -1));

        jLabel1.setFont(new java.awt.Font("Javanese Text", 1, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(125, 30, 1));
        jLabel1.setText("Puntajes");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 140, -1, 20));

        img.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Plantilla.jpg"))); // NOI18N
        getContentPane().add(img, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 420));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        Main main = new Main();//Se instancia la ventana para ser utilizada
        main.setVisible(true);//Ponemos visible la ventana
        this.setVisible(false);//Dejamos invible la ventana anterior
    }//GEN-LAST:event_btnVolverActionPerformed

    private void CargaDatos() {
     
       Gson gson = new Gson();
       try {
                //Se lee el archivo json que contiene los records
		BufferedReader br = new BufferedReader(new FileReader("score.json"));

		//El archivo json se combierte en un objeto
		Records records = gson.fromJson(br, Records.class);
                if(records.getRecords().isEmpty()){
                    text.setText("El sistema no regristra ningun record, juega para ser el primero");
                    
                }
                
                else{
                    Collections.sort(records.getRecords(), new Comparator() {
                        //Sobre-escribimos el motodo compare para indicar cual es la variable que queremos comparar para ordenar la lista
                        @Override
                        public int compare(Object o1, Object o2) {
                            
                            return new Short(((Record)o2).getPlayer().getScore()).compareTo(((Record)o1).getPlayer().getScore());
                        }
                    });
                    
                    //Se crea la tabla para poder mostrar los puntajes
                    DefaultTableModel model;
                    model = new DefaultTableModel(); 
                    
                    model.addColumn("Lugar");
                    model.addColumn("Nombre");
                    model.addColumn("Puntaje");
                    model.addColumn("Fecha");
            
                    DateFormat df =  DateFormat.getDateInstance();
                    
                    //Se llena la tabla con todos los registros
                    for (int i = 0; i < records.getRecords().size(); i++) {
                        model.addRow(new Object[]{"N°"+(i+1),records.getRecords().get(i).getPlayer().getNombre(), Short.toString(records.getRecords().get(i).getPlayer().getScore()), df.format(records.getRecords().get(i).getFecha())});
                    }
                    
                    
                    jTable2.setModel(model);
                    jTable2.setEnabled(false);
                   

                }
                
                
		

	} catch (IOException e) {
            CrearArchivo();//funcion para crear el archivo de scores en caso que no exista
            text.setText("El sistema no regristra ningun record, juega para ser el primero.");
            
	}
       catch (Exception e) {
            text.setText("A ocurrido un error al cargar los scores registrados en el sistema.");
	}
    }

    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel img;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel text;
    // End of variables declaration//GEN-END:variables

    //Método que permite crear archivo json
    private void CrearArchivo() {
        Gson gson = new Gson();
        Records records= new Records();
	String json = gson.toJson(records);

	try {
		//se escribe el archivo json vacio con la estructura correspondiente "score.json"
		FileWriter writer = new FileWriter("score.json");
		writer.write(json);
		writer.close();

	} catch (IOException e) {
		text.setText("Ha ocurrido un error de escritura al crear el archivo");
	}

    }

   
    
}
